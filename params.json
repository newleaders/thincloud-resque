{"name":"Thincloud Resque","tagline":"Rails Engine to provide Resque configuration and support for Rails 3.2.x applications.","body":"# Thincloud::Resque\r\n\r\n## Description\r\n\r\nRails Engine to provide Resque support for Thincloud applications.\r\n\r\nThe Thincloud::Resque engine:\r\n\r\n* Manages all of the Resque (and Redis) dependencies for your application\r\n* Initializes the Redis connection and namespace for Resque\r\n* Configures the Resque Front End (resque-web) to use HTTP Basic authentication\r\n* Optionally configures `resque_mailer`\r\n* Provides a Capistrano recipe to link resque-web assets during deployment\r\n\r\n\r\n## Requirements\r\n\r\nThis gem requires Rails 3.2+ and has been tested on the following versions:\r\n\r\n* 3.2\r\n\r\nThis gem has been tested against the following Ruby versions:\r\n\r\n* 1.9.3\r\n\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n``` ruby\r\ngem \"thincloud-resque\"\r\n```\r\n\r\n* Run `bundle`\r\n\r\nOr install it yourself as:\r\n\r\n```\r\n$ gem install thincloud-resque\r\n```\r\n\r\n## Usage\r\n\r\n### Configuration\r\n\r\nThincloud::Resque configuration options are available to customize the engine behavior. Available options and their default values:\r\n\r\n```ruby\r\n# Redis connection details\r\nredis_url         = \"unix:///tmp/redis.sock\"\r\nredis_namespace   = \"resque:APP_NAME:RAILS_ENV\"\r\nredis_driver      = \"ruby\"  # make sure to include the gem for your driver\r\n\r\n# Authenticaiton details used for the Resque Front End\r\nweb_username      = \"thincloud-resque\"\r\nweb_password      = \"thincloud-resque\"\r\n\r\n# Environment(s) where Resque::Mailer should be enabled\r\nmailer_environments = [:production]\r\n```\r\n#### Environment Variables\r\n\r\nSeveral of the options will use environment variables when found.\r\n\r\n```\r\nredis_url    -> ENV[\"REDIS_URL\"]\r\nweb_username -> ENV[\"RESQUE_WEB_USERNAME\"]\r\nweb_password -> ENV[\"RESQUE_WEB_PASSWORD\"]\r\n```\r\n\r\n#### Configuration Block\r\n\r\nThe `Thincloud::Resque` module accepts a `configure` block that takes the same options listed above. This block can be put into an initializer or inside of a `config/environments` file.\r\n\r\n```ruby\r\nThincloud::Resque.configure do |config|\r\n  config.redis_url       = \"unix:///tmp/my_redis.sock\"\r\n  config.redis_namespace = \"my_redis_namespace\"\r\n  config.redis_driver    = \"hiredis\"\r\n  # ...\r\nend\r\n```\r\n\r\n#### Rails Configuration\r\n\r\nYou can also access the configuration via the Rails configuration object. In fact, the engine uses the Rails config as storage when the block syntax is used. The `Thincloud::Resque::Configuration` object is made available under `config.thincloud.resque`. You can access this configuration in `config/application.rb` or in your `config/environments` files.\r\n\r\n```ruby\r\n# ...\r\nconfig.thincloud.resque.redis_url       = \"unix:///tmp/redis.sock\"\r\nconfig.thincloud.resque.redis_namespace = \"my_config_namespace\"\r\nconfig.thincloud.resque.redis_driver    = \"hiredis\"\r\n#...\r\n```\r\n\r\n_Note: Configuration values take precendence over environment variables._\r\n\r\n#### Mailers\r\n\r\nResque::Mailer is enabled for environments included in the `mailer_environments` array. By default it will be enabled for all mailers in those environments. If you need to selectively enable it for specific mailers you can disable all environments:\r\n\r\n```ruby\r\nconfig.mailer_environments = []\r\n```\r\n\r\nand, for those mailers that need to background email, add the following line:\r\n\r\n```ruby\r\ninclude Resque::Mailer\r\n```\r\n\r\n#### Routes\r\n\r\nResque has a built-in Front End Sinatra (resque-web) server that provides access to monitor the Resque server's status. To allow access to the Front End through your app you need to mount the engine in `config/routes.rb`:\r\n\r\n```ruby\r\nmount Thincloud::Resque::Engine => \"/resque\"\r\n```\r\n=> `http://yourapp/resque`\r\n\r\nCall this inside a namespace to create a nested route if needed:\r\n\r\n```ruby\r\nnamespace :admin do\r\n  mount Thincloud::Resque::Engine => \"/resque\"\r\nend\r\n```\r\n\r\n=> `http://yourapp/admin/resque`\r\n\r\n#### Capistrano\r\n\r\nTo make resque-web assets available to the released application, add the following line to your `deploy.rb` or `Capfile`:\r\n\r\n```ruby\r\nrequire \"thincloud/resque/capistrano\"\r\n```\r\n\r\nThis adds a recipe called `thincloud:resque:link_assets` that will run after `deploy:update_code`. The recipe links the web assets from the Resque gem directory into your application's public directory.\r\n\r\n#### Workers\r\n\r\nYou'll need Resque workers in order to have any jobs processed. We use `foreman` in our deployments to manage these. Simply add the following line to your `Procfile`:\r\n\r\n```\r\nworker: bundle exec rake environment resque:work RAILS_ENV=$RAILS_ENV QUEUE=*\r\n```\r\n\r\n_This assumes you're running bundler and that you need the environment loaded for these workers. Modify to suit your needs._\r\n\r\n## Contributing\r\n\r\n1. [Fork it](https://github.com/newleaders/thincloud-resque/fork_select)\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. [Create a Pull Request](https://github.com/newleaders/thincloud-resque/pull/new)\r\n\r\n\r\n## License\r\n\r\n* Freely distributable and licensed under the [MIT license](http://newleaders.mit-license.org/2012/license.html).\r\n* Copyright (c) 2012 New Leaders ([opensource@newleaders.com](opensource@newleaders.com))\r\n* [https://newleaders.com](https://newleaders.com)\r\n\r\n","google":"UA-1755363-18","note":"Don't delete this file! It's used internally to help with page regeneration."}